// Generated by LiveScript 1.5.0
(function(){
  var ref$, invalid, valid, loanFrom, loanUpTo, loanUpToHardLimit, addThousandSeparator, formatNumber, validateTotalLoan, slice$ = [].slice;
  ref$ = require('./resolutions'), invalid = ref$.invalid, valid = ref$.valid;
  ref$ = require('../../../../../config/company'), loanFrom = ref$.loanFrom, loanUpTo = ref$.loanUpTo, loanUpToHardLimit = ref$.loanUpToHardLimit;
  addThousandSeparator = require('../../../../../lib/utils/formatters').addThousandSeparator;
  formatNumber = partialize$.apply(this, [addThousandSeparator, [void 8, '\xA0'], [0]]);
  validateTotalLoan = function(input){
    var value;
    if (!/^(\d+)$/.test(input)) {
      return invalid('Använd siffror, tack.');
    }
    value = parseInt(input, 10);
    if (value < loanFrom) {
      return invalid("Lägsta lånebelopp är " + formatNumber(loanFrom) + " kr.");
    }
    if (value > loanUpToHardLimit) {
      return invalid("Högsta lånebelopp är " + formatNumber(loanUpTo) + " kr.");
    }
    return valid();
  };
  module.exports = validateTotalLoan;
  function partialize$(f, args, where){
    var context = this;
    return function(){
      var params = slice$.call(arguments), i,
          len = params.length, wlen = where.length,
          ta = args ? args.concat() : [], tw = where ? where.concat() : [];
      for(i = 0; i < len; ++i) { ta[tw[0]] = params[i]; tw.shift(); }
      return len < wlen && len ?
        partialize$.apply(context, [f, ta, tw]) : f.apply(context, ta);
    };
  }
}).call(this);
