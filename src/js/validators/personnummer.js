// Generated by LiveScript 1.5.0
(function(){
  var moment, ref$, invalid, valid, maxAge, luhn, validatePersonnummer;
  moment = require('moment');
  ref$ = require('./resolutions'), invalid = ref$.invalid, valid = ref$.valid;
  maxAge = require('../../../../../config/company').maxAge;
  luhn = function(input){
    var digits, checksum;
    digits = input.split('').map(function(it){
      return parseInt(it, 10);
    });
    checksum = digits.reverse().reduce(function(accumulator, value, index){
      var multiplier, product;
      multiplier = 1 + index % 2;
      product = multiplier * value;
      if (product > 9) {
        product -= 9;
      }
      return accumulator + product;
    });
    return checksum % 10;
  };
  validatePersonnummer = function(input, arg$){
    var now, today, matches, _, century, yy, mm, dd, separator, serial, checkDigit, todayCentury, isOverHundredYearsOld, dateOfBirthString, dateOfBirth, age;
    now = arg$.now;
    today = now.startOf('day');
    matches = /^(\d\d)?(\d\d)(\d\d)(\d\d)([-+])?(\d\d\d)(\d)$/.exec(input);
    if (matches == null) {
      return invalid('Fel format, exempel: 198011220123');
    }
    _ = matches[0], century = matches[1], yy = matches[2], mm = matches[3], dd = matches[4], separator = matches[5], serial = matches[6], checkDigit = matches[7];
    if (century == null) {
      todayCentury = Math.floor(today.year() / 100);
      isOverHundredYearsOld = separator === '+';
      if (today.year() < todayCentury + "" + yy) {
        century = todayCentury - 1;
      } else {
        century = todayCentury;
      }
      if (isOverHundredYearsOld) {
        century -= 1;
      }
    }
    dateOfBirthString = century + "" + yy + "-" + mm + "-" + dd;
    dateOfBirth = moment(dateOfBirthString);
    if (!dateOfBirth.isValid()) {
      return invalid((function(){
        switch (dateOfBirth.invalidAt()) {
        case 0:
          return "Ogiltigt födelseår " + dateOfBirthString + ".";
        case 1:
          return "Ogiltig födelsemånad " + dateOfBirthString + ".";
        case 2:
          return "Ogiltig födelsedag " + dateOfBirthString + ".";
        default:
          return "Ogiltigt födelsedatum " + dateOfBirthString + ".";
        }
      }()));
    }
    age = today.diff(dateOfBirth, 'years');
    if (age < 0) {
      return invalid(dateOfBirthString + " är ett framtida datum.");
    }
    if (age < 18) {
      return invalid('Du måste vara minst 18 år gammal för att göra en ansökan.');
    }
    if (age > maxAge) {
      return invalid("Tyvärr kan vi bara hjälpa personer upp till " + maxAge + " år.");
    }
    if (luhn(yy + "" + mm + dd + serial + checkDigit) !== 0) {
      return invalid('Ogiltigt personnummer. Vänligen se över dina fyra sista.');
    }
    return valid();
  };
  module.exports = validatePersonnummer;
}).call(this);
